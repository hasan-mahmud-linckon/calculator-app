name: Production Deployment

on:
  push:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: linckon/calculator-app
  
jobs:
  deploy-production:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Run unit tests
      run: mvn test -Dtest="*ServiceTest"
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Push to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Deploy to production EC2
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PROD_PRIVATE_KEY }}" > ~/.ssh/prod_key
        chmod 600 ~/.ssh/prod_key
        ssh-keyscan -H ${{ secrets.EC2_PROD_HOSTS }} >> ~/.ssh/known_hosts
        
        # Get current image for rollback
        CURRENT_IMAGE=$(ssh -i ~/.ssh/prod_key ${{ secrets.EC2_PROD_USER }}@${{ secrets.EC2_PROD_HOSTS }} \
          "docker ps --format '{{.Image}}' | grep ${{ env.IMAGE_NAME }} | head -1" || echo "none")
        echo "CURRENT_IMAGE=$CURRENT_IMAGE" >> $GITHUB_ENV
        
        ssh -i ~/.ssh/prod_key ${{ secrets.EC2_PROD_USER }}@${{ secrets.EC2_PROD_HOSTS }} << 'EOF'
          # Pull new image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Stop and remove existing container
          if docker ps -q --filter "name=myapp-prod" | grep -q .; then
            docker stop myapp-prod
            docker rm myapp-prod
          fi
          
          # Start new container
          docker run -d --name myapp-prod --restart unless-stopped -p 8080:8080 -e SPRING_PROFILES_ACTIVE=production ${{ env.IMAGE_NAME }}:${{ github.sha }}
        EOF
        
    - name: Run smoke tests
      id: smoke-tests
      run: |
        sleep 90
        for i in {1..10}; do
          if curl -f http://${{ secrets.EC2_PROD_HOSTS }}:8080/api/calculator/health; then
            echo "smoke_tests_status=success" >> $GITHUB_OUTPUT
            exit 0
          fi
          sleep 10
        done
        echo "smoke_tests_status=failed" >> $GITHUB_OUTPUT
        exit 1

    - name: Rollback on failure
      if: failure() && env.CURRENT_IMAGE != 'none'
      id: rollback
      run: |
        ssh -i ~/.ssh/prod_key ${{ secrets.EC2_PROD_USER }}@${{ secrets.EC2_PROD_HOSTS }} << EOF
          docker stop myapp-prod || true
          docker rm myapp-prod || true
          docker run -d --name myapp-prod --restart unless-stopped -p 8080:8080 -e SPRING_PROFILES_ACTIVE=production ${{ env.CURRENT_IMAGE }}
        EOF
        echo "rollback_status=success" >> $GITHUB_OUTPUT

    - name: Verify rollback
      if: failure() && steps.rollback.outputs.rollback_status == 'success'
      id: rollback-verification
      run: |
        sleep 60
        for i in {1..8}; do
          if curl -f http://${{ secrets.EC2_PROD_HOSTS }}:8080/api/calculator/health; then
            echo "rollback_verification=success" >> $GITHUB_OUTPUT
            exit 0
          fi
          sleep 10
        done
        echo "rollback_verification=failed" >> $GITHUB_OUTPUT
        exit 1

    # Discord Notifications
    - name: Discord - Success
      if: success()
      run: |
        curl -H "Content-Type: application/json" -X POST -d '{"embeds":[{"title":"ðŸš€ Production Deployment Success","color":65280,"fields":[{"name":"Commit","value":"${{ github.sha }}","inline":true},{"name":"Server","value":"${{ secrets.EC2_PROD_HOSTS }}","inline":true}]}]}' ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Discord - Rollback Success
      if: failure() && steps.rollback-verification.outputs.rollback_verification == 'success'
      run: |
        curl -H "Content-Type: application/json" -X POST -d '{"embeds":[{"title":"ðŸš¨ Production Rollback Success","color":16776960,"fields":[{"name":"Failed Commit","value":"${{ github.sha }}","inline":true},{"name":"Rolled Back To","value":"${{ env.CURRENT_IMAGE }}","inline":true}]}]}' ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Discord - Failure
      if: failure() && (steps.rollback-verification.outputs.rollback_verification == 'failed' || env.CURRENT_IMAGE == 'none')
      run: |
        curl -H "Content-Type: application/json" -X POST -d '{"embeds":[{"title":"ðŸš¨ Production Deployment Failed","color":16711680,"fields":[{"name":"Commit","value":"${{ github.sha }}","inline":true},{"name":"Status","value":"ðŸš¨ IMMEDIATE MANUAL INTERVENTION NEEDED","inline":true}]}]}' ${{ secrets.DISCORD_WEBHOOK_URL }}
        
    - name: Cleanup
      if: always()
      run: rm -f ~/.ssh/prod_key